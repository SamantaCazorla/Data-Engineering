https://europe-west1-tactile-timer-422121-b2.cloudfunctions.net/gans_function

import functions_framework
import pandas as pd
import sqlalchemy
import requests
from datetime import timedelta, datetime
from pytz import timezone


@functions_framework.http
def insert(request):
    #1. Create connection string: 
    connection_string = create_connection_string()
    
    # 2. Get the cities info from the database:
    city_df = get_cities_data(connection_string)
    
    # 3. Get the weather data for each city and store it to the database
    get_and_store_weather_data(connection_string, city_df)
    
    # 4. Get the airport info from the database:
    airport_df = get_airports(connection_string)
    
    # 5. Get the flights data for each airport and store it to the database
    get_and_store_flights(connection_string, airport_df)
    
    return "Success"


# Establish connection with my SQL
def create_connection_string():
  connection_name = "CLOUD INSTANCE CONNECTION NAME"
  db_user = "root"
  db_password = "YOUR INSTANCE PASSWORD"
  schema_name = "gans"

  driver_name = 'mysql+pymysql'
  query_string = {"unix_socket": f"/cloudsql/{connection_name}"}

  db = sqlalchemy.create_engine(
      sqlalchemy.engine.url.URL(
          drivername = driver_name,
          username = db_user,
          password = db_password,
          database = schema_name,
          query = query_string,
      )
  )
  return db
   

# Establish connection with my SQL
def create_connection_string():
    schema = "gans"
    host = "YOUR_CLOUD_SQL_INSTANCE_PUBLIC_IP"
    user = "root"
    password = "YOUR INSTANCE PASSWORD" 
    port = 3306
    connection_string =  f'mysql+pymysql://{user}:{password}@{host}:{port}/{schema}'
    return connection_string
    
    
# Get city table from SQL
def get_cities_data(connection_string):
    return pd.read_sql("city", con = connection_string)


def get_airports(connection_string):
    return pd.read_sql("airport",con=connection_string)


# Get weather data
def get_and_store_weather_data(connection_string, city_df):

    berlin_timezone = timezone("Europe/Berlin")
    API_key = "2296413757c470705fa30576a1d06ac5"
    
    # Create a dictionary with same keys as SQL and empty list before the loop.
    weather_items = {
        "city_id":[],  
        "city": [],
        "forecast_time": [],
        "temperature": [],
        "feels_like": [],
        "forecast": [],
        "rain_in_last_3h": [],
        "wind_speed": [],
        "data_retrieved_at": []
    }
    
    # For loop to create URL request for as many cities as we have in the list.
    for i, row in city_df.iterrows():
        url = (f"http://api.openweathermap.org/data/2.5/forecast?q={row['city']}&appid={API_key}&units=metric")
        # instead of give "city", we need to go inside the row and get the city name. {row["city"]}
        response = requests.get(url)
        
        # check response
        if response.status_code != 200:
            print(f"Failed to retrieve data for {row['city']}. Status code: {response.status_code}")
            continue
            
        weather_json = response.json()
        my_timestamp = datetime.now(berlin_timezone).strftime("%Y-%m-%d %H:%M:%S")   

        # For loop through the 8 first entries (for 1 day)
        for item in weather_json["list"][:8]:
            weather_items["city_id"].append(row["city_id"]), 
            weather_items["city"].append(row["city"]),  
            weather_items["forecast_time"].append(item.get('dt_txt',None)),
            weather_items["temperature"].append(item["main"].get("temp", None)),
            weather_items["feels_like"].append(item["main"].get("feels_like", None)),
            weather_items["forecast"].append(item["weather"][0].get("main", None)),
            weather_items["rain_in_last_3h"].append(item.get("rain", {}).get("3h", 0)),
            weather_items["wind_speed"].append(item["wind"].get("speed", None)),
            weather_items['data_retrieved_at'].append(my_timestamp)
  
    # Create dataframe for weather
    weather_df = pd.DataFrame(weather_items)

    # Fill in Weather table in SQL:
    weather_df.to_sql('weather',if_exists='append',con=connection_string,index=False)
    

# Get flights data:
def get_and_store_flights(connection_string, airport_df):
    
    now = datetime.now()
    tomorrow = now + timedelta(days=1)
    tomorrow = tomorrow.strftime('%Y-%m-%d')
    
    times_lists = [{'from':'00:00','to':'11:59'},{'from':'12:00','to':'23:59'}]
    
    flights_dict = {
            'ICAO':[],
            'from_city':[],
            'arrival_time':[],
            'airline':[],
            'terminal':[],
            'flight_status':[]}
    
    for i, row in airport_df.iterrows():
         # For loop to create URL request for as many ICAO as we have in the list.
        for time in times_lists:
            url = f"https://aerodatabox.p.rapidapi.com/flights/airports/icao/{row['ICAO']}/{tomorrow}T{time['from']}/{tomorrow}T{time['to']}"
            querystring = {"withLeg":"true","withCancelled":"true","withCodeshared":"true","withCargo":"true","withPrivate":"true","withLocation":"false"}
            headers = {
                "X-RapidAPI-Key": "14a44098c8mshe4536a007985112p1e3b4bjsn8fd805eb6bd4",
                "X-RapidAPI-Host": "aerodatabox.p.rapidapi.com"
            }
            response = requests.get(url, headers=headers, params=querystring)
            
            # check response
            if response.status_code != 200:
                print(f"Failed to retrieve data for {row['ICAO']}. Status code: {response.status_code}")
                continue
            
            flight_json = response.json()
            
            # For loop for each entry of the table.
            for flight in flight_json['arrivals']:
                flights_dict['ICAO'].append(row['ICAO'])
                flights_dict['arrival_time'].append(flight['arrival'].get('scheduledTime',{}).get('local',None))
                flights_dict['from_city'].append(flight['departure'].get('airport',{}).get('name','unknown'))
                flights_dict['airline'].append(flight['airline'].get('name',None))
                flights_dict['terminal'].append(flight['arrival'].get('terminal','unknown'))
                flights_dict['flight_status'].append(flight.get('status',None))
    
    # Create dataframe for flight
    flight_df = pd.DataFrame(flights_dict)
    flight_df['arrival_time'] = flight_df['arrival_time'].str[:-6]
    
    # Fill in Flight table in SQL:
    flight_df.to_sql('flight',con=connection_string,index=False,if_exists='append')
